credence Notes
# key.ssh
-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAh3xahCAjw36/41W6PxWy9qy4E6DgQwxST8jJT4V7SDQ8aCfC
LtyIdc266kL0TSHtQ+loCiq/JFLZxLP6x5jjr9h72OH5Le0FBAPuRgqtU2TaXCv8
d4wJ8fY3MmjACvl3So7q9I5q9ph+XXFIAq/rNVNe8LEtTgcVkYhxIdRXB5VPfkjt
dsmn68W96uVumhGIwWyOMrAVUUTSvVypBcir105d1X1cEFzJeZTfEbzuEmkTFr4M
MhFKvmid+2hWrmOXEWJ9v6tv/0Eprcmk60zy3ZCpnmsepDfu+ah1/vy44fbb1y6D
mwcLG2VtG08pM6RO6t4P8V7CI60JT5BSdifkHQIDAQABAoIBADPuVkOOjibAzow0
r86+YnpqeaQMZelNL7+lFoSEhVyHqR/DHYsYvLVqxdpFD58BAhClxlsfR2SE3TOo
SNd4os0kDVR0SS5xSxre5tWyAf2VCp2JvpuT8bvsw/tuay3JsQ/C+AwFCrq6eLUY
VqGxDFbEPf/D6bmevYWq5rIw0ar13OqoB4e1KH+b59DRKwotxhbNgPpfwCPWPxPB
RyA5GWMkd8FHxBYwhpWQpBr/PUlCUcYLQPJd/rKJiN0MU7pZ4kV1dyqd8GuzoX2C
LYUAvTCZgcjFhbF9NXYbfwWbWYjo4Vf6KoOpK0yqf8Pfm+QeDfbrgleAf4JN8vf3
7a1Q3AECgYEA7uN66poBZruiWV6x7mxMyO9nqvkw3somvFUtzocRU6tYIEWRdeej
xk2CXLYRZnIpgrETPItP00pETLWHsNO4MZMxuNnsRDiIkFB62aiW+edcbV3IbiFP
rH+Hb29nk69jOzl/OG4NzWOPFb7wlL2WZaaapUhBeQ7I+aixOPR3iQUCgYEAkTDE
Xlcb5qSELFOHWrkXviSnDOMRscM4eR4mwLd1NVDVrlbbNmdz6LHeZTcccbCO3Evv
OVY3WKFjTfHZoOT3amQvf8KjLPuCp91u94n8EJdmRQjLoe2EZdOjQZONp0YecqAD
Z+VamM7E7jSXAAp/inrKfyzV9T3YGq3vWQumejkCgYASEKnO6+6HMlFIqNyTxyTX
XSNdzpJfhrH/NAHOyHAK/74eUqR5YhcEfAALusj+EkwJUhK+VVqoA8m+c0vbl2cq
eJMeA3zWe9/36d4gb5tbMp/OtXTevy4jQVGgn7AZfv3mEKcKQWhRy+GaJ2JSHTQu
Y7b2IMyytueD2bntMK+JcQKBgAV/FCACKjM8DSjkbJ5ZnXV8S7qoKfZRzqR/KLZo
+43uJni4HwpbNj8b5LBuOqxvI6lhUogYJHY9fdXojvWRVXB4pHewtZ6xUsvqDRZf
6ePy51M7twHFTRrRvT9xR46KkAKE3jwjqZ9ZTIk8Am9k9lkWtu3Dk8H5+mFgLkxv
rXi5AoGAA+2yxmVgvCpQQDEv14S4njHg9Ypl3PfTxGmnry6jWHfMy2EDIVR1uakK
q7vUcTWmVCpkD0xR+PG/uao/8mtivWzbowoybsS5A767ZKPhjm7ylN7ZhPQUZoYz
UhL17zsRtQflLfzERU0PDcsNi2J3z7RwQsSGLzKR+JwcvWtZtO4=
-----END RSA PRIVATE KEY-----

#******************************************************************************
pipeline {
    agent any
    
    tools {
        jdk 'jdk21'
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        
        stage('Git checkout') {
            steps {
               git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/dianda1/end-to-end-project-repo.git'

            }
        }
        
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        
        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName= Corporate-pipeline -Dsonar.projectKey=Corporate-pipeline \
                    -Dsonar.java.binaries=. '''
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        
         
        stage('Build') {
            steps {
               sh "mvn package"  
            }
        }
        
        stage('Publish to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'type-id-you-can-remember', jdk: 'jdk21', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy"
                }
            }          
        
        }
        
        stage('Build & Tag Docker Image') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'dockerhub-cred', toolName: 'docker', url: 'docker push dianda87/adoptopenjdk-image:latest') {
                            sh "docker build -t dianda87/adoptopenjdk-image:latest ."
                    }
               }
            }
        }
        
        stage('Docker Image Scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html dianda87/adoptopenjdk-image:latest "
            }
        }
        
        stage('Push Docker image') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'dockerhub-cred', toolName: 'docker', url: 'docker push dianda87/adoptopenjdk-image:latest') {
                       sh "docker push dianda87/adoptopenjdk-image:latest"
                        }
                    }
                
            }
        }

        stage('Deploy To Kubernetes') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://10.0.1.90:6443') {
                    sh "kubectl apply -f deployment-service.yaml"
                }
                 
            }
        }
        
        stage('Verify Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://10.0.1.90:6443') {
                    sh "kubectl get pods -n webapps"
                    sh "kubectl get nodes -n webapps"
                    
                }
                 
            }
        }
        
    }
    post {
    always {
        script {
            def jobName = env.JOB_NAME
            def buildNumber = env.build_number
            def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
            def bannerColor = pipelineStatus.toUpperCase() == 'success' ? 'green' : 'red'

            def body = """
                <html>
                <body>
                <div style ="border: 4px solid ${bannerColor}; padding: 10px;">
                <h2>${jobName} - Build ${buidNumber}</h2>
                <div style = "background-color: ${bannerColor}; padding: 10px;">
                <h3 style ="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                </div
                <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                </div>
                </body>
                </html>
            """
            emailext (
                subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                body: body
                to: 'diandad66@gmail.com'
                from: 'jenkins@example.com'
                replyTo: 'jenkins@example.com'
                mimeType: 'text/html'
                attachmentsPattern: 'trivy-report.html'
            )



        }
    }

    }
    
}


